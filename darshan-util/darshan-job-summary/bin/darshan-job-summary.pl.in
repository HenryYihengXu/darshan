#!/usr/bin/perl -w
#
#  (C) 2015 by Argonne National Laboratory.
#      See COPYRIGHT in top-level directory.
#

# Set via configure
my $PREFIX="@prefix@";

use lib "@prefix@/lib";
use TeX::Encode;
use Encode;
use File::Temp qw/ tempdir /;
use File::Basename;
use Cwd;
use Getopt::Long;
use English;
use Number::Bytes::Human qw(format_bytes);
use POSIX qw(strftime);


sub process_args
{
    use vars qw( $opt_help $opt_output $opt_verbose );

    Getopt::Long::Configure("no_ignore_case", "bundling");
    GetOptions( "help",
        "output=s",
        "verbose");

    if($opt_help)
    {
        print_help();
        exit(0);
    }

    if($opt_output)
    {
        $output_file = $opt_output;
    }

    if($opt_verbose)
    {
        $verbose_flag = $opt_verbose;
    }

    # there should only be one remaining argument: the input file 
    if($#ARGV != 0)
    {
        print "Error: invalid arguments.\n";
        print_help();
        exit(1);
    }

    $input_file = $ARGV[0];

    # give default output file a similar name to the input file.
    #   log.darshan.gz => log.pdf
    #   log_name => log_name.pdf
    if (not $opt_output)
    {
        $output_file = basename($input_file);
        if ($output_file =~ /\.darshan\.gz$/)
        {
            $output_file =~ s/\.darshan\.gz$/\.pdf/;
        }
        else
        {
            $output_file .= ".pdf";
        }
    }

    return;
}

#
# Check for all support programs needed to generate the summary.
#
sub check_prereqs
{
    my $rc;
    my $output;
    my @bins = ($darshan_parser, $pdflatex, $epstopdf,
                $gnuplot, $cp, $mv);
    foreach my $bin (@bins)
    {
        $rc = checkbin($bin);
        if ($rc)
        {
            print("error: $bin not found in PATH\n");
            exit(1);
        }
    }

    # check  gnuplot version
    $output = `$gnuplot --version`;
    if($? != 0)
    {
        print("error: failed to execute $gnuplot.\n");
        exit(1);
    }

    $output =~ /gnuplot (\d+)\.(\d+)/;
    if($1 < 4 || ($1 < 5 && $2 < 2))
    {
        print("error: detected $gnuplot version $1.$2, but darshan-job-summary requires at least 4.2.\n");
        exit(1);
    }

    return;
}

sub print_help
{
    print <<EOF;

Usage: $PROGRAM_NAME <options> input_file

    --help          Prints this help message
    --output        Specifies a file to write pdf output to
                    (defaults to ./summary.pdf)
    --verbose       Prints and retains tmpdir used for LaTeX output

Purpose:

    This script reads a Darshan output file generated by a job and
    generates a pdf file summarizing job behavior.

EOF
    return;
}
